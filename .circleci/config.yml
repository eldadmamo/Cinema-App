
orbs:
  slack: circleci/slack@5.1.1
version: 2.1
executors:
  app-executor:
    docker:
      - image: cimg/node:18.18.0
    working_directory: ~/repo
  slack-executor:
    docker:
      - image: 'cibuilds/base:latest'
    resource_class: small

aliases:
  - &show-current-branch-name
    run:
      name: Show current branch
      command: echo "${CIRCLE_BRANCH}"
  - &restore-cache
    restore_cache:
      keys:
        - app-{{ checksum "package.json" }}
        - app-
  - &install-dependencies
    run:
      name: Install dependencies
      command: npm install
  - &save-cache
    save_cache:
      paths:
        - node_modules
      key: app-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
  - &install-aws-cli
    run:
      name: Install AWS CLI
      command: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
        aws --version
  - &build-project
    run:
      name: Build Project
      command: |
        npm install
        npm run build
        echo "Build successful"

jobs:
  build:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies
      - *save-cache

  linting:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run linting
          command: npm run lint
  
  prettier:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run prettier check
          command: npm run prettier:check

  deploy-to-aws-s3:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS S3
          command: |
            if [ "${CIRCLE_BRANCH}" = "master" ]; then
              aws s3 sync ~/repo/dist s3://"${AWS_BUCKET_PRODUCTION}" --delete --region "${AWS_REGION}"
            elif [ "${CIRCLE_BRANCH}" = "staging" ]; then
              aws s3 sync ~/repo/dist s3://"${AWS_BUCKET_STAGING}" --delete --region "${AWS_REGION}"
            else
              aws s3 sync ~/repo/dist s3://"${AWS_DEV_BUCKET}" --delete --region "${AWS_REGION}"
            fi

  deploy-to-aws-cloudfront:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS CloudFront
          command: |
            if [ "${CIRCLE_BRANCH}" = "master" ]; then
              aws s3 sync ~/repo/dist s3://"${AWS_BUCKET_PRODUCTION}" --delete --region "${AWS_REGION}"
            elif [ "${CIRCLE_BRANCH}" = "staging" ]; then
              aws s3 sync ~/repo/dist s3://"${AWS_BUCKET_STAGING}" --delete --region "${AWS_REGION}"
            else
              aws s3 sync ~/repo/dist s3://"${AWS_DEV_BUCKET}" --delete --region "${AWS_REGION}"
            fi
  
  test:
    executor: app-executor
    steps:
      - run: echo "test my app"
  
  notify-via-slack:
    executor: slack-executor  
    steps:
      - run: echo "Slack notification"
      - slack/notify:
          event: 'always'
          channel: 'cinema-circleci'
          template: ''
          custom: |
            {
             "blocks": [
                {
                  "type": "header"
                  "text": {
                     "type": "plain_text",
                     "text": "${CIRCLE_BRANCH} branch deploymemt to aws s3 and cloudfront is complete. üëç",
                     "emoji": true  
                  }
                },
                {
                  "type": "section"
                  "fields" : [
                    {
                      "type":"mrkdwn",
                      "text": "*Project*:\n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type":"mrkdwn",
                      "text": "*Branch*:\n$CIRCLE_BRANCH"
                    },
                    {
                      "type":"mrkdwn",
                      "text": "*When*:\n$(date + '%m/%d/%Y %T')"
                    },
                    {
                      "type":"mrkdwn",
                      "text": "*Build*:\n$CIRCLE_BUILD_NUM"
                    },
                    {
                      "type":"mrkdwn",
                      "text": "*Author*:\n$CIRCLE_PROJECT_USERNAME"
                    }
                    ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                          "type": "plain_text",
                          "text": "View Job"
                        },
                        "url":"${CIRCLE_BUILD_URL}"
                    }
                    ]
                }
              ]
            }

workflows:
  build_and_deploy:
    jobs:
      - test
      - notify-via-slack:
          requires:
            - test
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      # - prettier:
      #     requires:
      #       - build
      #     filters:
      #       branches:
      #         only:
      #           - develop
      #           - staging
      #           - master
      # - deploy-to-aws-s3:
      #     requires:
      #       - prettier
      #     filters:
      #       branches:
      #         only:
      #           - develop
      #           - staging
      #           - master
      # - deploy-to-aws-cloudfront:
      #     requires:
      #       - deploy-to-aws-s3
      #     filters:
      #       branches:
      #         only:
      #           - develop
      #           - staging
      #           - master
      # - notify-via-slack:
      #     requires:
      #       - deploy-to-aws-cloudfront
      #     filters:
      #       branches:
      #         only:
      #           - develop
      #           - staging
      #           - master